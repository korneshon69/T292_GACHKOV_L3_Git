const BASE_URL = 'https://jsonplaceholder.typicode.com';

const sortPostsByTitleLengthDesc = (posts) => {
  return [...posts].sort((a, b) => b.title.length - a.title.length);
};

const sortCommentsByName = (comments) => {
  return [...comments].sort((a, b) => a.name.localeCompare(b.name));
};

const filterUserFields = (users) => {
  return users.map(user => ({
    id: user.id,
    name: user.name,
    username: user.username,
    email: user.email,
    phone: user.phone
  }));
};

const filterIncompleteTodos = (todos) => {
  return todos.filter(todo => !todo.completed);
};

const getFilteredUsersPromise = () => {
  const url = `${BASE_URL}/users`;

  fetchData(url)
    .then(users => {
      return filterUserFields(users);
    })
    .then(filteredUsers => {
      console.log('Пользователи с отфильтрованными полями (Promise)');
      console.log(filteredUsers);
    })
    .catch(error => {
      console.error('Ошибка в getFilteredUsersPromise:', error.message);
    });
};

const getIncompleteTodosPromise = () => {
  const url = `${BASE_URL}/todos`;

  fetchData(url)
    .then(filterIncompleteTodos)
    .then(incompleteTodos => {
      console.log('Незавершенные задачи (Promise)');
      console.log(incompleteTodos);
    })
    .catch(error => {
      console.error('Ошибка в getIncompleteTodosPromise:', error.message);
    });
};

//Вызов:
getFilteredUsersPromise();
getIncompleteTodosPromise();
